#Detecting cancer driver genes based on positional clustering
laml.sig = oncodrive(maf = maf_file, minMut = 5, pvalMethod = 'zscore')
plotOncodrive(res = laml.sig, fdrCutOff = 0.1, useFraction = TRUE, labelSize = 0.5)
laml.sig
plotOncodrive(res = laml.sig, fdrCutOff = 0.1, useFraction = TRUE, labelSize = 0.5, labels = "ABCA7")
plotOncodrive(res = laml.sig, fdrCutOff = 0.1, useFraction = TRUE, labelSize = 0.5)
plotOncodrive(res = laml.sig$Hugo_Symbol, fdrCutOff = 0.1, useFraction = TRUE, labelSize = 0.5)
??plotOncodrive
plotOncodrive(res = laml.sig, fdrCutOff = 0.1, useFraction = TRUE, labelSize = 0.5, colCode = c("red", "blue"))
plotOncodrive(res = laml.sig, fdrCutOff = 0.1, useFraction = TRUE, labelSize = 0.5, colCode = c("red", "blue"))
laml.sig
plotOncodrive(res = laml.sig, fdrCutOff = 0.5, useFraction = TRUE, labelSize = 0.5)
plotOncodrive(res = laml.sig, fdrCutOff = 0.9, useFraction = TRUE, labelSize = 0.5)
plotOncodrive(res = laml.sig, fdrCutOff = 0.05, useFraction = TRUE, labelSize = 0.5)
#
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
#
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'days_to_last_followup', Status = 'vital_status', isTCGA = TRUE)
table(Breast_tumor_metadata$vital_status)
#
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'vital_status', isTCGA = TRUE)
maf_file@data$days_to_last_followup
??mafSurvival
maf_file@clinical.data
columns(maf_file@clinical.data)
colnames(maf_file@clinical.data)
length(maf_file@clinical.data$days_to_last_followup)
maf_file@clinical.data$days_to_last_followup
table(maf_file@clinical.data$days_to_last_followup, maf_file@clinical.data$days_to_death)
days_table <- table(maf_file@clinical.data$days_to_last_followup, maf_file@clinical.data$days_to_death)
days_table View(days_table )
View(days_table )
unique(Breast_tumor_metadata$vital_status)
table(Breast_tumor_metadata$vital_status, useNA = "ifany")
is_dead <- tolower(Breast_tumor_metadata$vital_status) %in% c("Dead")
is_dead
sum_dead_na_dlf <- sum(is_dead & is.na(Breast_tumor_metadata$days_to_last_followup))
sum_dead <- sum(is_dead)
c(dead_patients = sum_dead, dead_with_na_days_to_last_followup = sum_dead_na_dlf)
dead_rows <- which(is_dead)
dead_rows
is_dead
s_dead <- tolower(Breast_tumor_metadata$vital_status) %in% c("Dead")
is_dead <- tolower(Breast_tumor_metadata$vital_status) %in% c("Dead")
which(is_dead)
table(Breast_tumor_metadata$vital_status)
# Check if 'days_to_last_followup' is missing for dead patients
with(Breast_tumor_metadata, table(
vital_status,
is.na(days_to_last_followup)
))
days_to_last_followup
Breast_tumor_metadata$days_to_last_followup
table(Breast_tumor_metadata$vital_status, Breast_tumor_metadata$days_to_last_followup)
# Check if 'days_to_last_followup' is missing for dead patients
with(Breast_tumor_metadata, table(
vital_status,
is.na(days_to_last_followup)
))
clin  <- Breast_tumor_metadata
to_num <- function(x) {
x <- trimws(as.character(x))
x[x %in% c("[Not Available]", "[Not Applicable]", "[Unknown]", "NA", "", "null")] <- NA
suppressWarnings(as.numeric(x))
}
# Clean numeric time columns
clin$days_to_last_followup_num <- to_num(clin$days_to_last_followup)
clin$days_to_death_num         <- to_num(clin$days_to_death)
# Define status
is_dead <- tolower(clin$vital_status) %in% c("dead","deceased","1","true")
is_alive <- !is_dead
clin$days_to_last_followup_num[is_alive & clin$days_to_last_followup_num == 0] <- NA
# Build clean OS time/status
# If dead -> use days_to_death; else -> use days_to_last_followup
clin$OS_time   <- ifelse(is_dead, clin$days_to_death_num, clin$days_to_last_followup_num)
clin$OS_status <- as.integer(is_dead)  # 1 = dead, 0 = alive
table(is_dead = is_dead, OS_time_is_NA = is.na(clin$OS_time))
sum(is_dead &
!is.na(clin$days_to_last_followup_num) &
!is.na(clin$days_to_death_num) &
clin$days_to_last_followup_num != clin$days_to_death_num)
#
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'vital_status', isTCGA = TRUE)
unique(maf_file@clinical.data$vital_status)
table((maf_file@clinical.data$vital_status))
clin$vital_status <- trimws(toupper(clin$vital_status))
table((clin$vital_status))
clin$Status <- ifelse(clin$vital_status %in% c("DEAD","DECEASED", "1"), 1, 0)
table(clin$Status)
maf_file@clinical.data$vital_status <- ifelse(maf_file@clinical.data$vital_statuss %in% c("DEAD", "1"), 1, 0)
maf_file@clinical.data$vital_status  <- trimws(toupper(maf_file@clinical.data$vital_status))
maf_file@clinical.data$vital_status <- ifelse(maf_file@clinical.data$vital_status %in% c("DEAD", "1"), 1, 0)
table(maf_file@clinical.data$vital_status)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'vital_status', isTCGA = TRUE)
# Numeric times
num <- function(x) suppressWarnings(as.numeric(as.character(x)))
dtd  <- num(clin$days_to_death)
dtlf <- num(clin$days_to_last_followup)
dtd
dtlf
# Unified OS time: death time if dead, else last follow-up
clin$OS.time <- ifelse(!is.na(dtd), dtd, dtlf)
clin$OS.time
dtd  <- num(maf_file@clinical.data$days_to_death)
dtlf <- num(maf_file@clinical.data$days_to_last_followup)
# Unified OS time: death time if dead, else last follow-up
maf_file@clinical.data$OS.time <- ifelse(!is.na(dtd), dtd, dtlf)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
complete <- with(clin, !is.na(OS.time) & !is.na(Status))
complete
table(complete )
unique(
maf_file@data$Tumor_Sample_Barcode[maf_file@data$Hugo_Symbol == "PIK3CA"]
)
mut_samples <- unique(
maf_file@data$Tumor_Sample_Barcode[maf_file@data$Hugo_Symbol == "PIK3CA"]
)
tab <- table(ifelse(clin$Tumor_Sample_Barcode[complete] %in% mut_samples, "Mut", "WT"))
print(tab)  # you want both Mut > 0 and WT > 0
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE,
groupNames = c("Mutant", "WT"))
ene <- "PIK3CA"
# All aliquot/sample barcodes present in the MAF
all_samples <- unique(maf_file@data$Tumor_Sample_Barcode)
# Samples with a non-silent mutation in the gene
mut_samples <- unique(
maf_file@data$Tumor_Sample_Barcode[
maf_file@data$Hugo_Symbol == gene &
maf_file@data$Variant_Classification != "Silent"
]
)
gene <- "PIK3CA"
# All aliquot/sample barcodes present in the MAF
all_samples <- unique(maf_file@data$Tumor_Sample_Barcode)
# Samples with a non-silent mutation in the gene
mut_samples <- unique(
maf_file@data$Tumor_Sample_Barcode[
maf_file@data$Hugo_Symbol == gene &
maf_file@data$Variant_Classification != "Silent"
]
)
# Wild-type = everything else
wt_samples <- setdiff(all_samples, mut_samples)
length(mut_samples); length(wt_samples)
head(mut_samples); head(wt_samples)
unique(maf_file@data$Variant_Classificatio)
gene <- "PIK3CA"
# Collapse to TCGA patient IDs (first 12 characters)
maf_samples_patient <- unique(substr(maf_file@data$Tumor_Sample_Barcode, 1, 12))
mut_patients <- unique(substr(
maf_file@data$Tumor_Sample_Barcode[
maf_file@data$Hugo_Symbol == gene &
maf_file@data$Variant_Classification != "Silent"
], 1, 12))
wt_patients <- setdiff(maf_samples_patient, mut_patients)
length(mut_patients); length(wt_patients)
mut_patients
wt_samples
# Try collapsing to patient IDs
mut_patients <- substr(mut_samples, 1, 12)
wt_patients  <- substr(wt_samples, 1, 12)
mut_patients
wt_patients
clin <- maf_file@clinical.data
complete <- !is.na(clin$OS.time) & !is.na(clin$Status)
tab <- table(ifelse(clin$Tumor_Sample_Barcode[complete] %in% mut_patients,
"Mut", "WT"))
print(tab)
table(ifelse(clin$Tumor_Sample_Barcode[complete] %in% mut_patients, "Mut", "WT"))
complete
maf_file@clinical.data[,.(OS.time, vital_status)]
maf_file@clinical.data[,vital_status :=  as.numeric(vital_status)]
maf_file@clinical.data[,OS.time :=  as.numeric(OS.time)]
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
table(maf_file@clinical.data$vital_status)
length(unique(maf_file@clinical.data$bcr_patient_barcode))
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
head(maf_file@clinical.data$bcr_patient_barcode)
head(maf_file@clinical.data$Tumor_Sample_Barcode)
head(maf_file@clinical.data$bcr_patient_barcode)
head(maf_file@data$Tumor_Sample_Barcode)
maf_file@data$Tumor_Sample_Barcode
maf_file@clinical.data$bcr_patient_barcode
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
head(maf_file@clinical.data$Tumor_Sample_Barcode)
head(maf_file@data$Tumor_Sample_Barcode)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
rownames(maf_file@clinical.data) <- maf_file@clinical.data$bcr_patient_barcode
head(rownames(maf_file@clinical.data) )
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
# make sure these are character, not factors
maf_file@clinical.data$bcr_patient_barcode <- as.character(maf_file@clinical.data$bcr_patient_barcode)
maf_file@data$Tumor_Sample_Barcode        <- as.character(maf_file@data$Tumor_Sample_Barcode)
head(maf_file@data$Tumor_Sample_Barcode )
head(maf_file@clinical.data$bcr_patient_barcode)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
rownames(maf_file@clinical.data) <- maf_file@clinical.data$bcr_patient_barcode
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
all(substr(unique(maf_file@data$Tumor_Sample_Barcode), 1, 12) %in% rownames(maf_file@clinical.data))
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = TRUE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TP53', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'pik3ca', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PIK3CA', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'TTN', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'CDH1', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'PTEN', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'GATA3', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# Survival analysis
mafSurvival(maf = maf_file, genes = 'NEB', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
# A) Predict genesets associated with survival
#Using top 20 mutated genes to identify a set of genes (of size 2) to predict poor prognostic groups
prog_geneset = survGroup(maf = maf_file, top = 20, geneSetSize = 2, time = "OS.time", Status = "vital_status", verbose = FALSE)
prog_geneset
mafSurvGroup(maf = laml, geneSet = c("FLG", "NEB"), time = "OS.time", Status = "vital_status")
mafSurvGroup(maf = maf_file, geneSet = c("FLG", "NEB"), time = "OS.time", Status = "vital_status")
mafSurvGroup(maf = maf_file, geneSet = c("TP53", "USH2A"), time = "OS.time", Status = "vital_status")
mafSurvGroup(maf = maf_file, geneSet = c("FLG", "NEB"), time = "OS.time", Status = "vital_status")
colnames(maf_file@clinical.data)
gender.ce = clinicalEnrichment(maf = maf_file, clinicalFeature = 'gender')
fab.ce$groupwise_comparision[p_value < 0.05]
gender.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = gender.ce, pVal = 0.05, geneFontSize = 0.5, annoFontSize = 0.6)
dgi = drugInteractions(maf = maf_file, fontSize = 0.75).
dgi = drugInteractions(maf = maf_file, fontSize = 0.75)
dnmt3a.dgi = drugInteractions(genes = "TP53", drugs = TRUE)
#Printing selected columns.
dnmt3a.dgi[,.(Gene, interaction_types, drug_name, drug_claim_name)]
pws = pathways(maf = maf_file, plotType = 'treemap')
plotPathways(maf = maf_file, pathlist = pws)
radiation_therapy.ce = clinicalEnrichment(maf = maf_file, clinicalFeature = 'radiation_therapy')
radiation_therapy.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = radiation_therapy.ce, pVal = 0.05, geneFontSize = 0.5, annoFontSize = 0.6)
radiation_therapy.ce
radiation_therapy.ce$``
radiation_therapy.ce$pairwise_comparision
unique(radiation_therapy.ce$pairwise_comparision$Feature_1)
unique(radiation_therapy.ce$pairwise_comparision$Feature_2)
unique(radiation_therapy.ce$groupwise_comparision$Group1)
??plotEnrichmentResults
unique(radiation_therapy.ce$groupwise_comparision$Group2)
unique(maf_file@clinical.data$radiation_therapy)
maf_file@clinical.data$radiation_therapy <- ifelse(
maf_file@clinical.data$radiation_therapy %in% c("NO", "YES"),
maf_file@clinical.data$radiation_therapy,
NA
)
unique(maf_file@clinical.data$radiation_therapy)
radiation_therapy.ce = clinicalEnrichment(maf = maf_file, clinicalFeature = 'radiation_therapy')
radiation_therapy.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = radiation_therapy.ce, pVal = 0.05, geneFontSize = 0.5, annoFontSize = 0.6)
plotEnrichmentResults(enrich_res = radiation_therapy.ce, pVal = 0.05, geneFontSize = 0.5, annoFontSize = 0.6, featureLvls = 2)
radiation_therapy.ce
plotEnrichmentResults(enrich_res = radiation_therapy.ce, pVal = 0.05, geneFontSize = 0.5, annoFontSize = 0.6, featureLvls = c("GATA3"))
plotEnrichmentResults(enrich_res = radiation_therapy.ce, pVal = 0.01, geneFontSize = 0.5, annoFontSize = 0.6)
plotEnrichmentResults(enrich_res = radiation_therapy.ce, pVal = 0.001, geneFontSize = 0.5, annoFontSize = 0.6)
library(data.table)
# assume your table is called df
df <- radiation_therapy.ce$pairwise_comparison
# filter significant genes
sig_genes <- df[
fdr < 0.05 & as.numeric(sub(" of.*", "", n_mutated_Feature1)) > 0
]
df
df <- radiation_therapy.ce$pairwise_comparison
df
radiation_therapy.ce$pairwise_comparison
radiation_therapy.ce
radiation_therapy.ce$pairwise_comparision
# assume your table is called df
df <- radiation_therapy.ce$pairwise_comparision
df
# filter significant genes
sig_genes <- df[
fdr < 0.05 & as.numeric(sub(" of.*", "", n_mutated_Feature1)) > 0
]
sig_genes
sig_genes <- sig_genes[order(fdr)]
sig_genes
sig_genes$logFDR <- -log10(sig_genes$fdr)
ggplot(sig_genes[1:20], aes(x=reorder(Hugo_Symbol, logFDR), y=logFDR)) +
geom_col(fill="steelblue") +
coord_flip() +
labs(
x="Gene", y="-log10(FDR)",
title="Top significant genes in radiation therapy comparison"
) +
theme_minimal()
# Extract mutation counts
sig_genes[, mut1 := as.numeric(sub(" of.*", "", n_mutated_Feature1))]
sig_genes[, mut2 := as.numeric(sub(" of.*", "", n_mutated_Feature2))]
ggplot(sig_genes[1:15], aes(x=Hugo_Symbol)) +
geom_bar(aes(y=mut1, fill="Feature 1"), stat="identity", position="dodge") +
geom_bar(aes(y=mut2, fill="Feature 2"), stat="identity", position="dodge") +
coord_flip() +
labs(y="Number of mutated samples", x="Gene") +
scale_fill_manual(values=c("Feature 1"="tomato", "Feature 2"="skyblue")) +
theme_minimal()
# Extract mutation counts
sig_genes[, mut1 := as.numeric(sub(" of.*", "", n_mutated_Feature1))]
sig_genes[, mut2 := as.numeric(sub(" of.*", "", n_mutated_Feature2))]
ggplot(sig_genes[1:15], aes(x=Hugo_Symbol)) +
geom_bar(aes(y=mut1, fill="Feature 1"), stat="identity", position="dodge") +
geom_bar(aes(y=mut2, fill="Feature 2"), stat="identity", position="dodge") +
coord_flip() +
labs(y="Number of mutated samples", x="Gene") +
scale_fill_manual(values=c("Feature 1"="tomato", "Feature 2"="skyblue")) +
theme_minimal()
n_mutated_Feature1df
df
# First extract numerator/denominator and compute relative frequencies
df[, c("mut1", "total1") := tstrsplit(n_mutated_Feature1, " of ", fixed=TRUE)]
df[, c("mut2", "total2") := tstrsplit(n_mutated_Feature2, " of ", fixed=TRUE)]
# Convert to numeric
df[, `:=`(mut1 = as.numeric(mut1),
total1 = as.numeric(total1),
mut2 = as.numeric(mut2),
total2 = as.numeric(total2))]
# Compute relative values
df[, rel1 := mut1 / total1]
df[, rel2 := mut2 / total2]
# Take top 20 significant genes
top20 <- df[order(fdr)][1:20]
# Reshape to long format for ggplot
plotdf <- melt(top20,
id.vars = "Hugo_Symbol",
measure.vars = c("rel1", "rel2"),
variable.name = "Feature",
value.name = "Relative")
# Make Feature labels clearer
plotdf[, Feature := fifelse(Feature == "rel1", "Feature_1 (YES)", "Feature_2 (NO)")]
# Plot
ggplot(plotdf, aes(x = reorder(Hugo_Symbol, Relative), y = Relative, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
coord_flip() +
labs(x = "Gene", y = "Relative mutated fraction",
title = "Top 20 significant genes by relative mutation frequency") +
theme_minimal()
top20[, diff_rel := rel1 - rel2]
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), label = Hugo_Symbol)) +
geom_point() +
geom_text_repel() +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance")
library(ggrepel)
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), label = Hugo_Symbol)) +
geom_point() +
geom_text_repel() +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance")
df
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), size = mut1 + mut2, label = Hugo_Symbol)) +
geom_point(alpha = 0.7) +
geom_text_repel(data = subset(top20, fdr < 0.05 & (mut1 + mut2) >= 5)) +
scale_size_continuous(name = "Total mutations") +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance (highlighting robust genes)")
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), label = Hugo_Symbol)) +
geom_point() +
geom_text_repel() +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance")
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), size = mut1 + mut2, label = Hugo_Symbol)) +
geom_point(alpha = 0.7) +
geom_text_repel(data = subset(top20, fdr < 0.05 & (mut1 + mut2) >= 5)) +
scale_size_continuous(name = "Total mutations") +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance (highlighting robust genes)")
# Plot
ggplot(plotdf, aes(x = reorder(Hugo_Symbol, Relative), y = Relative, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
coord_flip() +
labs(x = "Gene", y = "Relative mutated fraction",
title = "Top 20 significant genes by relative mutation frequency")how +
# Make Feature labels clearer
plotdf[, Feature := fifelse(Feature == "rel1", "Feature_1 (YES)", "Feature_2 (NO)")]
# Plot
ggplot(plotdf, aes(x = reorder(Hugo_Symbol, Relative), y = Relative, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
coord_flip() +
labs(x = "Gene", y = "Relative mutated fraction",
title = "Top 20 significant genes by relative mutation frequency")how +
# Plot
ggplot(plotdf, aes(x = reorder(Hugo_Symbol, Relative), y = Relative, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
coord_flip() +
labs(x = "Gene", y = "Relative mutated fraction",
title = "Top 20 significant genes by relative mutation frequency") +
theme_minimal()
# Take top 20 significant genes
top20 <- df[order(fdr)][1:20]
# Reshape to long format for ggplot
plotdf <- melt(top20,
id.vars = "Hugo_Symbol",
measure.vars = c("rel1", "rel2"),
variable.name = "Feature",
value.name = "Relative")
# Make Feature labels clearer
plotdf[, Feature := fifelse(Feature == "rel1", "Feature_1 (YES)", "Feature_2 (NO)")]
# Plot
ggplot(plotdf, aes(x = reorder(Hugo_Symbol, Relative), y = Relative, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
coord_flip() +
labs(x = "Gene", y = "Relative mutated fraction",
title = "Top 20 significant genes by relative mutation frequency") +
theme_minimal()
top20[, diff_rel := rel1 - rel2]
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), label = Hugo_Symbol)) +
geom_point() +
geom_text_repel() +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance")
ggplot(top20, aes(x = diff_rel, y = -log10(fdr), size = mut1 + mut2, label = Hugo_Symbol)) +
geom_point(alpha = 0.7) +
geom_text_repel(data = subset(top20, fdr < 0.05 & (mut1 + mut2) >= 5)) +
scale_size_continuous(name = "Total mutations") +
theme_minimal() +
labs(x = "Difference in relative mutation (Feature1 - Feature2)",
y = "-log10(FDR)",
title = "Effect size vs significance (highlighting robust genes)")
dgi = drugInteractions(maf = maf_file, fontSize = 0.75)
dnmt3a.dgi = drugInteractions(genes = "TP53", drugs = TRUE)
#Printing selected columns.
dnmt3a.dgi[,.(Gene, interaction_types, drug_name, drug_claim_name)]
pws = pathways(maf = maf_file, plotType = 'treemap')
pws = pathways(maf = maf_file, plotType = 'treemap')
plotPathways(maf = maf_file, pathlist = pws)
pws
ncol(pws)
library("mclust")
hetero_breast_tumor = inferHeterogeneity(maf = maf_file, tsb = 'TCGA-AB-2972')
??inferHeterogeneity
head(maf_file@data$Tumor_Sample_Barcode, 1)
hetero_breast_tumor = inferHeterogeneity(maf = maf_file, tsb = 'TCGA-3C-AAAU')
head(maf_file@clinical.data$bcr_patient_barcode)
hetero_breast_tumor = inferHeterogeneity(maf = maf_file, tsb = 'TCGA-3C-AAAU')
hetero_breast_tumor = inferHeterogeneity(maf = maf_file, tsb = 'TCGA-3C-AAAU-01A-11D-A41F-09')
print(hetero_breast_tumor$clusterMeans)
#Visualizing results
plotClusters(clusters = hetero_breast_tumor)
laml.sig = extractSignatures(mat = maf_file, n = 3)
laml.sig = extractSignatures(mat = maf_file, n = 3)
library('NMF')
install.packages("NMF")
library('NMF')
laml.sign = estimateSignatures(mat = maf_file, nTry = 6)
laml.tnm = trinucleotideMatrix(maf = maf_file, prefix = 'chr', add = TRUE, ref_genome = "BSgenome.Hsapiens.UCSC.hg19")
library("BSgenome.Hsapiens.UCSC.hg19", quietly = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
library("BSgenome.Hsapiens.UCSC.hg19", quietly = TRUE)
laml.tnm = trinucleotideMatrix(maf = maf_file, prefix = 'chr', add = TRUE, ref_genome = "BSgenome.Hsapiens.UCSC.hg19")
plotApobecDiff(tnm = laml.tnm, maf = maf_file, pVal = 0.2)
laml.sign = estimateSignatures(mat = laml.tnm, nTry = 6)
laml.sig = extractSignatures(mat = laml.tnm, n = 3)
#Compate against original 30 signatures
laml.og30.cosm = compareSignatures(nmfRes = laml.sig, sig_db = "legacy")
#Compate against updated version3 60 signatures
laml.v3.cosm = compareSignatures(nmfRes = laml.sig, sig_db = "SBS")
library('pheatmap')
pheatmap::pheatmap(mat = laml.og30.cosm$cosine_similarities, cluster_rows = FALSE, main = "cosine similarity against validated signatures")
maftools::plotSignatures(nmfRes = laml.sig, title_size = 1.2, sig_db = "SBS")
#1) encode dead alive as 0 and 1
maf_file@clinical.data$vital_status <- ifelse(maf_file@clinical.data$vital_status %in% c("DEAD", "1"), 1, 0)
# Numeric times
num <- function(x) suppressWarnings(as.numeric(as.character(x)))
dtd  <- num(maf_file@clinical.data$days_to_death)
dtlf <- num(maf_file@clinical.data$days_to_last_followup)
# Unified OS time: death time if dead, else last follow-up
maf_file@clinical.data$OS.time <- ifelse(!is.na(dtd), dtd, dtlf)
maf_file@clinical.data[,vital_status :=  as.numeric(vital_status)]
maf_file@clinical.data[,OS.time :=  as.numeric(OS.time)]
# Survival analysis
mafSurvival(maf = maf_file, genes = 'NEB', time = 'OS.time', Status = 'vital_status', isTCGA = FALSE)
